#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\rightmargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Part*
Port Scanning
\end_layout

\begin_layout Standard
Tanto el método de SYN Scan y Connect Scan sirven para descubrir puertos
 abiertos sobre TCP y no siempre ambos pueden diferenciar entre un puerto
 cerrado en el host o bloqueado por algún firewall intermedio.
\end_layout

\begin_layout Standard
El algoritmo de SYN Scan consiste básicamente en enviar un paquete y esperar
 (o dar timeout) la respuesta.
 Analizando la respuesta (los flags) es que concluye si el puerto está abierto
 o no.
\end_layout

\begin_layout Standard
El algoritmo de Connect Scan es parecido, pero consiste en establecer una
 conexión a nivel TCP y luego cerrarla.
 Si se pudo establecer, entonces el puerto está abierto.
 Y si no se pudo, entonces no está abierto.
 Esto si bien implica una sola llamada al systema para el connect y otra
 para el close, se traduce en el envío de varios más paquetes (con la espera
 a sus respectivas respuestas si corresponde).
 Para el connect, entonces, se envía un paquete, se espera la respuesta
 de otro y luego se envía un paquete más (el 3-way handshake asumiendo que
 no hay pérdida de paquetes).
 Luego, el close (asumiendo que no hay pérdida de paquetes también) se traduce
 en el envío de un paquete (FIN), la espera de su respuesta (FIN/ACK), y
 el envío de un paquete más(FIN)
\end_layout

\begin_layout Standard
El mayor tiempo que consumen estos algotirmos es tiempo de red.
 El tiempo de CPU utilizado es realmente despreciable (sólo fijarse unos
 flags de un paquete o cosas similares, muy pocas y muy poco costosas operacione
s), por lo que para evaluar la complejidad de los algoritmos contaremos
 como operaciones la cantidad de paquetes que tienen que enviar o recibir.
\end_layout

\begin_layout Standard
Para el algoritmo de SYN Scan entonces, se utilizan 2 paquetes por lo ya
 explicado.
 Mientras que en el de Connect Scan se utilizan 6.
 También es importante notar que si el host al cual se está escanneando
 no responde se esperará un timeout y si este está configurado muy alto,
 puede llevar mucho tiempo escannear hosts que no responden.
 Pero tampoco es posible ponerlo en un valor muy bajo, ya que también se
 podrían descartar/ignorar paquetes cuando el RTT con el host no es tan
 bajo.
 Luego, hay que encontrar un 
\begin_inset Quotes eld
\end_inset

trade-off
\begin_inset Quotes erd
\end_inset

 razonable para el uso y hosts que querramos escannear.
\end_layout

\begin_layout Standard
El algoritmo de Connect Scan llega a establecer una conexión a nivel TCP,
 por lo que es muy fácil para el destino darse cuenta que ésta se ha creado.
 También, en la conexión no se intercambia ningún paquete y se inmediatamente,
 por lo que son patrones bastantes fáciles de detectar.
 En cambio, el algoritmo de SYN Scan no llega a establecer la conexión TCP,
 por lo que no es tan trivial de detectar.
 Sin embargo, utilizando herramientas es posible detectar los paquetes SYN
 recibidos y loguearlos.
 De esta forma, se puede detectar a una IP realizando un SYN scan ya que
 nunca establece las conexiones y son siempre desde la misma IP.
 Esto, en linux, puede hacerse facilmente utilizando iptables y alguna herramien
ta para parsear los logs generados con él.
 También, hay herramientas para detectar port scanning, como psad, que además
 de detectar port scanning permiten bannear a las IPs que están intentando
 detectar puertos abiertos en nuestro servidor.
\end_layout

\begin_layout Part*
Detección de versión
\end_layout

\begin_layout Standard
Se detectó que con la configuración default de Debian los paquetes de Open-SSH,
 Exim y Apache2 son vulnerables a esta técnica.
\end_layout

\begin_layout Standard
En el caso de Open-SSH decimos que es vulnerable porque al conectarse con
 netcat se obtiene:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ nc localhost 22
\end_layout

\begin_layout Plain Layout

SSH-2.0-OpenSSH_6.0p1 Debian-1 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
En el caso de exim, haciendo la misma prueba se obtiene:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

nc localhost 25
\end_layout

\begin_layout Plain Layout

220 localhost ESMTP Exim 4.77
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es decir, en ambos casos simplemente al conectarnos podemos ver que reportan
 la versión que están corriendo (y esta es, efectivamente, la versión que
 está instalada).
 Para el caso de apache, se puede ver que es vulnerable utilizando el programa
 que realizamos que debería servir para cualquier servidor HTTP que ponga
 información relevante en el campo 
\begin_inset Quotes eld
\end_inset

Server:
\begin_inset Quotes erd
\end_inset

 de los headers HTTP al responder un request 
\begin_inset Quotes eld
\end_inset

HEAD / HTTP/1.0
\backslash
n
\backslash
n
\begin_inset Quotes erd
\end_inset

.
 Por ejemplo, en el caso de apache con la configuración default se puede
 ver:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

bash banner_grabbing.sh localhost 80
\end_layout

\begin_layout Plain Layout

Server: Apache/2.2.22 (Debian) 
\end_layout

\end_inset


\end_layout

\begin_layout Part*
OS fingerprinting vía Nmap
\end_layout

\begin_layout Standard
Se utilizaron dos host: uno con Debian Linux testing/unstable actualizado
 y otro Windows 7 Professional.
\end_layout

\begin_layout Standard
Al intentar detectar la versión de Linux, no se obtuvieron buenos resultados
 (se suprimió parte del output para mayor claridad):
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ nmap -v -O localhost
\end_layout

\begin_layout Plain Layout

No exact OS matches for host (If you know what OS is running on it, see
 http://nmap.org/submit/ ).
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Al correrlo con el Windows:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$ nmap -v -O 10.2.5.3
\end_layout

\begin_layout Plain Layout

OS fingerprint not ideal because: Didn't receive UDP response.
 Please try again with -sSU
\end_layout

\begin_layout Plain Layout

No OS matches for host
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Al probar nuevamente con la opción recomendada, se obtuvo:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

nmap -v -sSU  -O 10.2.5.3
\end_layout

\begin_layout Plain Layout

Running: Microsoft Windows Vista|2008|7
\end_layout

\begin_layout Plain Layout

OS details: Microsoft Windows Vista SP0 or SP1, Windows Server 2008 SP1,
 or Windows 7, Microsoft Windows Vista SP2 or Windows Server 2008 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Es decir, el resultado que se obtuvo es bastante preciso.
 Es importante notar que, sin embargo, tardó al rededor de 15 minutos en
 realizar este último escaneo.
 También, por las dudas, se probó escanear al Linux con estas opciones,
 pero los resultados obtenidos fueron los mismos.
\end_layout

\begin_layout Standard
Por otro lado, se puede ver durante el proceso que se escanean puertos abiertos
 usando la técnica de SYN Scan, utilizando un RST final para cerrar la conexión
 como se muestra en la captura a continuación:
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename port-scan.png
	width 12cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la misma se puede ver el envío del paquete SYN, la respuesta SYN/ACK
 porque el puerto está abierto, y el envío de un RST para cerrar la conexión.
\end_layout

\begin_layout Standard
Se puede identificar en la captura también la técnica ICMP echo (IE).
 Se puede ver un paquete ICMP con el bit DF a nivel IP, con Type Of Service
 usado 0, número de secuencia 295 y 120 bytes de 0x00 como payload.
 Esto se lo muestra en la siguiente captura:
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename icmp-pkt-1.png
	width 12cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
En la captura no se llega a notar que los 120 bytes de payload son efectivamente
 0x00, pero se corroboró que así sea.
\end_layout

\begin_layout Standard
También se puede notar el segundo paquete de esta técnica, que es similar
 salvo que utiliza un TOS de 4, el ICMP request ID y númer de secuencia
 incrementados en uno, como se muestra en la captura a continuación:
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Graphics
	filename icmp-pkt-2.png
	width 12cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Y las respuestas generadas para esta prueba por los dos hosts es distinta.
 En el caso de Windows, se notó que no se responde ningún paquete ICMP de
 esta prueba, mientras que en Linux sí.
\end_layout

\end_body
\end_document
